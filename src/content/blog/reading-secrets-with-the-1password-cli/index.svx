---
publishedAt: "2023-09-04"
updatedAt: "2023-09-06"
title: "Reading Secrets With the 1Password CLI"
tags: ["secrets"]
description: [
  "1Password is a password manager that offers a CLI, allowing for programmatic retrieval of secrets."
]
seoTitle: "Reading Secrets With the 1Password CLI"
sources: [
  {
		text: "1Password CLI reference",
		url: "https://developer.1password.com/docs/cli/reference"
	},
	{
		text: "aerc wiki",
		url: "https://man.sr.ht/~rjarry/aerc/integrations/password-manager.md"
	},
	{
		text: "npm-publish docs",
		url: "https://docs.npmjs.com/cli/v8/commands/npm-publish#otp"
	}
]
---

<script>
  import { FootnoteList, FootnoteListItem, FootnoteTrigger, Image, StepHeading } from "$lib/components/"
</script>

I use 1Password as my password manager but didn't really see much need for the CLI that they provide until fairly recently. I'll go over a couple of use cases where the CLI has integrated really well into my flow.

<StepHeading text="Keeping Dot Files Password-Free" />

I've been using `aerc`<FootnoteTrigger index={1} /> for a few weeks. When you add an email account to `aerc`, it saves the password in a configuration file (`~/.config/aerc/accounts.conf` for me), an example of which can be seen below:

```toml
[Fastmail]
source   = imaps://user%40fastmail.com:agvsbg8gd29ybgqh@imap.fastmail.com
outgoing = smtps://user%40fastmail.com:agvsbg8gd29ybgqh@imap.fastmail.com
```

Having the password stored in plain text<FootnoteTrigger index={2} /> is less than ideal, even if it is on a device you own. Helpfully, `aerc` provides a way to specify an arbitrary command that can be executed to retrieve the password. To use the 1Password CLI, the accounts configuration file can be modified as follows:

```toml{3,5}
[Fastmail]
source            = imaps://user%40fastmail.com@imap.fastmail.com
source-cred-cmd   = op read op://MyVault/Fastmail/aerc-password
outgoing          = smtps://user%40fastmail.com@imap.fastmail.com
outgoing-cred-cmd = op read op://MyVault/Fastmail/aerc-password
```

The command we want executed is `op read`, and we pass it the URL<FootnoteTrigger index={3} /> of the secret to access. The next time `aerc` is launched, a TouchID prompt, or a prompt to `Allow Access`, will be presented as shown below:

<Image alt="Launching aerc with the 1Password CLI integration" src="aerc-1password.gif" />

<StepHeading text="Autofilling One-Time Passwords" />

As a publisher of npm packages, it's a good idea to enable 2FA on your npm account. This makes a leaked token with write-access less of a risk since no writes (such as publishing a new version of a package) can be performed without a valid OTP.

When publishing an npm package using `npm publish`, a prompt is shown in the terminal asking the user to type in the OTP. However, there is also an `--otp` flag we can make use of to provide the OTP upfront:

```
npm publish --otp $(op item get NPM --otp)
```

This time we use the `op item get` command<FootnoteTrigger index={4} />, passing it the name of the item and the `--otp` flag. Upon execution, a TouchID prompt or an `Allow Access` prompt is presented, removing the need to manually type or paste the OTP. As an added convenience, the above command can be bound to a shell alias.

<Image alt="Publishing an npm package with the 1Password CLI integration" src="npm-1password.gif" />

## Footnotes

<FootnoteList>
	<FootnoteListItem index={1}>
		<a href="https://aerc-mail.org/" rel="nofollow">aerc</a> is a terminal-based email client.
	</FootnoteListItem>
	<FootnoteListItem index={2}>
		This <a href="https://gist.github.com/ryanahamilton/2045007" rel="nofollow">helpful URL scheme</a> shows that the password is <code>agvsbg8gd29ybgqh</code>.
	</FootnoteListItem>
	<FootnoteListItem index={3} type="blocks">
		<p>The URL takes the form:</p>
		<pre><code>op://&lt;vault&gt;/&lt;item&gt;[/&lt;section&gt;]/&lt;field&gt;</code></pre>
	</FootnoteListItem>
	<FootnoteListItem index={4} type="blocks">
		<p>Note that if we tried using the <code>op read</code> command:</p>
		<pre><code>op read 'op://MyVault/NPM/Security/one-time password'</code></pre>
		<p>instead of the current OTP being returned, we would get the reference URL used to generate the OTP:</p>
		<pre><code>otpauth://totp/croccifixio?secret=AGVSBG8GD29YBGQHIGDVB2QGBMLNAHQ1&issuer=npm</code></pre>
	</FootnoteListItem>
</FootnoteList>
