---
publishedAt: "2016-07-19"
title: "Commit Messages in GNU&nbsp;Nano"
tags: ["git"]
description: [
  "When committing any changes using Git, it is important to include relevant and well constructed commit messages for other developers &ndash; as well as your future self &ndash; who may be involved in the project. In this guide, I will discuss how to go about formatting git commit messages."
]
seoTitle: "Commit Messages in GNU Nano"
---

<script>
  import { Kbd } from "$lib/components"
</script>

When committing any changes using Git, it is important to include relevant and well constructed commit messages for other developers &ndash; as well as your future self &ndash; who may be involved in the project. A decently crafted commit message can help speed up code comprehension, hopefully allowing others to quickly grasp what problem a commit is addressing and how it is going about solving it.

In this article, we will develop a workflow that utilises the GNU Nano editor &ndash; a terminal-based text editor that ships with several Linux distros &ndash; to format commit messages, so that they comply with the [Tim Pope's 50/72 principle][1]. For insight on why we should bother abiding to this principle, see Chris Beam's article on [how to write git commit messages][2].

## Modifying the nanorc file

We will start off by configuring GNU Nano to wrap lines of text after 72 characters.

First, we will navigate to the `/etc` directory.

```
$$$ cd /etc
```

Now that we are in the directory containing the `nanorc` configuration file, we will open this file using the GNU Nano editor. Run the following command:

```
$$$ sudo nano nanorc
```

The above command will open the `nanorc` file in the terminal. We can move the cursor up and down using the arrow keys on the keyboard. We can also make use of some [GNU Nano shortcuts](#gnu-nano-shortcuts) to easily and comfortably edit the file.

There are 2 changes we need to make to the `nanorc` file. The first change enables line wrapping. The second one ensures that wrapping occurs at or before the 72<sup>nd</sup> character of a line.

1. `set nowrap` &rarr; `# set nowrap`

    We comment out `nowrap` to disable its effect.

2. `set fill -8` &rarr; `set fill 72`

   For the curious, the default value of `-8` means that lines will wrap at 8 characters less than the width of the terminal. So if the terminal were to be sized at 100 characters/columns wide, then lines would wrap at the 92<sup>nd</sup> character mark.

<a name="save-file"></a>

To save the changes we have made, press <Kbd keys={["Ctrl", "O"]} /> and to overwrite the file press <Kbd keys={["Enter"]} />. The file will remain open in the editor, so to close the GNU Nano editor press <Kbd keys={["Ctrl", "X"]} />.

## Writing commit messages with Nano

To verify that GNU Nano is the default editor in our terminal, use the command below and if necessary, set Nano as the default. The below command lists the available editors and allows us to select one as the default.

```
$$$ sudo update-alternatives --config editor
```

Assuming that in our local repository, there are some changes that have been staged for commit, we can run this command:

```
$$$ git commit
```

This will open up the `COMMIT_EDITMSG` file using GNU Nano. Git uses this file to store the commit message that corresponds to a particular commit.

Following the 50/72 principle, we will begin by typing out a subject line &ndash; ideally one that is at most 50 characters long. If the change we have made is small and does not need to be described further, we can save the file in the same way we [saved our changes](#save-file) to the `nanorc` file.

However, if we want to provide more details about the changes introduced in our commit, we should type out a more detailed description in the body of our commit message. Remember to include a blank line between the subject and body.

Due to the changes we made to the `nanorc` file, the GNU Nano editor will automatically wrap text at 72 characters.

<a name="gnu-nano-shortcuts"></a>

## GNU Nano shortcuts

The bottom tab of the GNU Nano editor displays several shortcuts such as `^X`&nbsp;`Exit`. This means that to close the editor we should press <Kbd keys={["Ctrl", "X"]} />. However, there can be scenarios where the same keybinding for a particular shortcut in GNU Nano is the same one used for a shortcut in another program that may also be running &ndash; for instance, if we are using a code editor with an integrated terminal, some shortcuts may affect both.

A prime example of this would be while using the [Cloud9 IDE][3] to develop in our web browser. The `^W`&nbsp;`Where Is` shortcut will present a few problems. Typically, pressing <Kbd keys={["Ctrl", "W"]} /> within a web browser will cause the current tab to close. Even if we disable this particular web browser shortcut or re-map it to a different keybinding, Cloud9 defaults to using <Kbd keys={["Ctrl", "W"]} /> to close a pane &ndash; a small window within the Cloud9 IDE interface that contains tabs, of which our terminal would be one.

To circumvent this issue, we can press the <Kbd keys={["Esc"]} /> key twice and then the key that appears after the `^`. For instance, to make use of the `^W`&nbsp;`Where Is` shortcut, we would use the following key sequence, pressing the keys one after the other:<br /><Kbd keys={["Esc", "Esc", "W"]} separator="&rarr;" />

The `^W`&nbsp;`Where Is` shortcut is used to search for strings. It is useful if you know what you are looking for within a file and are not too inclined to scroll and search for it yourself &ndash; case in point: finding the lines in the `nanorc` file that need to be changed.

[1]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
[2]: http://chris.beams.io/posts/git-commit/
[3]: https://c9.io/
