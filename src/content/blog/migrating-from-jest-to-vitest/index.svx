---
title: "Migrating From Jest To&nbsp;Vitest"
tags: ["tests"]
description: [
  ""
]
seoTitle: "Migrating From Jest To Vitest"
dependencies: {
  jest: "28.1.0",
  vitest: "0.17.0"
}
---

<script>
import StepHeading from "$lib/components/StepHeading.svelte"
</script>

Vitest is a JavaScript testing framework with a mostly Jest-compatible API. I ran into a number of minor road bumps while migrating existing Jest test suites to Vitest (which are enumerated below), but the end result was definitely worth it: a 2-3 times drop in the time it takes to run the tests in CI.

<StepHeading text="Global imports" />

Both testing frameworks support global imports which allow you to write your tests without explicitly importing test utility functions. In Vitest, functions to do with timers, mocking, stubbing and spying are grouped under the `vi` namespace. The following are roughly equivalent:

- `jest.fn()` -> `vi.fn()`
- `jest.mock()` -> `vi.mock()`
- `jest.spyOn()` -> `vi.spyOn()`

A key difference is that types in Vitest must be explicitly imported. This one-liner in Jest:

```typescript
let findUser: jest.Mock;
```

now becomes:

```typescript
import { Mock } from "vitest";
// `import type { Mock } from "vitest";` also works

let findUser: Mock;
```

<StepHeading text="Spying on default exports" />

In Jest, it is possible to spy on a module's default export by importing it as a namespace, i.e. `import * as namespaces from "./filePath"`:

```typescript
import * as setUserStatusNamespace from "./setUserStatus";

const spyExecute = jest
  .spyOn(setUserStatusNamespace, "default")
  .mockResolvedValueOnce({ id: "123", status: "BANNED" });
```

In Vitest, this is not possible. The module we intend to spy on needs to be updated to use named exports.

```typescript
import * as setUserStatusNamespace from "./setUserStatus";

const spyExecute = vi
  .spyOn(setUserStatusNamespace, "setUserStatus")
  .mockResolvedValueOnce({ id: "123", status: "BANNED" });
```

<StepHeading text="Type inference" />

`vi.fn()` has a stricter type than `jest.fn()`. Change this:

```typescript
const findUser: () => IUser = jest.fn();
```

to this:

```typescript
const findUser = (vi.fn() as unknown) as () => IUser;
```
<StepHeading text="ES modules" />

Default importing from a module that does not have a default export, such as Ramda, will no longer work.

Change this:

```typescript
import R from "ramda";
```

to this:

```typescript
import * as R from "ramda";
```

<StepHeading text="Mocking without callbacks" />

In Jest, after calling `mock` on a module, it is possible to mock t

```typescript
import axios form "axios";

jest.mock("axios");

(axios.post as jest.Mock).mockResolvedValue({
  data: {
    firstName: "Rick",
    surname: "Sanchez"
  }
});
```

```typescript
import axios form "axios";

vi.mock("axios");

axios.post = vi.fn().mockResolvedValue({
  data: {
    firstName: "Rick",
    surname: "Sanchez"
  }
});
```
