---
import { getCollection } from 'astro:content';
import { entries, filter, groupBy, map, pipe, reverse, sort } from '@fxts/core';

import Layout from '../layouts/TopLevel.astro';
import { formatDate } from '../utils/date';
import BlogPostSummary from '../components/BlogPost/Summary.astro';
---

<Layout>
	{
		pipe(
			getCollection('blog'),
			filter((post) => post.data.publishedAt.valueOf() > 0),
			sort((a, b) => b.data.publishedAt.valueOf() - a.data.publishedAt.valueOf()),
			map((post) => ({ ...post, year: formatDate(post.data.publishedAt, 'Y')!.trim() })),
			groupBy((post) => post.year),
			entries,
			reverse,
			map(([year, posts]) => (
				<ul class="year-list">
					<li class="year-list-item">
						<div class="year" data-total={posts.length}>
							<span>{year}</span>
						</div>
						<ul class="post-list">
							{posts.map((post, index) => (
								<li
									class="post-list-item"
									data-index={index + 1}
									data-mod-2={(index + 1) % 2}
									data-mod-3={(index + 1) % 3}
									data-reverse-index={posts.length - index}
								>
									<article>
										<BlogPostSummary
											slug={post.slug}
											tags={post.data.tags}
											title={post.data.title}
										/>
									</article>
								</li>
							))}
						</ul>
					</li>
				</ul>
			)),
		)
	}
</Layout>

<style>
	@media (prefers-color-scheme: dark) {
		.year-list {
			margin-block-start: 1.5rem;

			+ & {
				margin-block-start: 2.5rem;
			}
		}

		.year-list-item {
			display: grid;
			grid-template-columns: calc(1ch + 1.5rem) 1fr;
			position: relative;
		}

		.year {
			border: var(--border-width) solid var(--c-text);
			border-right-width: 0;
			content: attr(data-year);
			font-size: 1.25rem;
			line-height: 1;
			padding: 0.75rem calc((100% - 1ch) / 2);
			position: relative;
			word-break: break-all;

			&[data-total='1'] span {
				position: static;
			}

			span {
				position: sticky;
				top: 0;
			}
		}

		.post-list {
			border: 1px solid transparent;
			border-left-width: 0;
		}

		.post-list-item {
			outline: var(--border-width) solid var(--c-text);

			&:not(:focus) {
				outline-offset: calc(var(--border-width) / -2);
			}

			&:only-child {
				min-height: 100%;
			}
		}
	}

	@media (prefers-color-scheme: light) {
		.year-list {
			margin-top: 1rem;

			+ & {
				margin-top: 1.5rem;
			}
		}

		.year {
			display: none;
		}

		.post-list {
			display: flex;
			flex-direction: column;
			gap: 1.5em;
		}

		.post-list-item {
			> div {
				display: none;
			}
		}
	}

	@media (min-width: 600px) {
		.post-list {
			display: grid;
			gap: 0;
			grid-template-columns: repeat(2, 1fr);
		}

		.post-list-item {
			display: grid;
		}

		article {
			display: grid;
		}

		@media (prefers-color-scheme: dark) {
			.year {
				font-size: 1.5rem;

				&[data-total='2'] span {
					position: static;
				}
			}

			.post-list-item {
				min-height: 7.8rem;
				outline: none;
			}
		}

		@media (prefers-color-scheme: light) {
			.year-list {
				+ & {
					margin-top: 2.5rem;
				}
			}

			.year {
				display: block;
				font-size: 1.75em;
				padding-bottom: 1.5rem;
			}
		}
	}

	@media (min-width: 1000px) {
		.post-list {
			grid-template-columns: repeat(3, 1fr);
		}

		@media (prefers-color-scheme: dark) {
			.year {
				&[data-total='3'] span {
					position: static;
				}
			}
		}
	}
</style>
